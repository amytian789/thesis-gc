plot(g1)
plot(g2)
}
gc
setwd("C:/Users/amyti/Documents/Amy - COLLEGE/THESIS/thesis-gc/")
source("GC_engine.R")
source("dist_engine.R")
source("GC_selection.R")
library(xlsx)
library(igraph)
library(clusteval)
################################## Read in data.
g <- length(xlsx::getSheets(loadWorkbook("data.xlsx")))
if (g %% 2 != 0) {
stop("The number of sheets must be even. For any graph pair,
each graph's sheet must be next to the other's.")
}
data <- vector("list",length(g))
for (i in 1:g) {
# First number = number of nodes in graph
data[[i]] <- as.vector(t( xlsx::read.xlsx("data.xlsx", sheetIndex = i, header = FALSE) ))[-1]
}
################################## Compute differences for all given graph pairs
# Setting parameters
gSumm <- c("cen_deg","cen_clo","cen_bet","ast",
"com_rw","com_im","com_bet","dis","eco","edh")
distf <- "l2"
gc <- vector("list",length(g/2))
for (i in seq(1,g,2)) {
# g1 and g2 must have the same number of nodes!
if (data[[i]][1] != data[[i+1]][1]) {
stop(paste("g1 and g2 must have the same # of nodes.
Error in sheets",i,"and",i+1))
}
# Create g1 and g2 as igraphs
g1 <- igraph::make_empty_graph(n = data[[i]][1], directed = FALSE)
g1 <- igraph::add_edges(g1, data[[i]][-1])
g2 <- igraph::make_empty_graph(n = data[[i+1]][1], directed = FALSE)
g2 <- igraph::add_edges(g2, data[[i+1]][-1])
# Call the engine to compute difference between g1 and g2
gc[[(i+1)/2]] <- GC_engine(g1=g1,g2=g2,gSumm=gSumm,distf=distf)
# Plot
g1$layout <- layout_in_circle
g2$layout <- layout_in_circle
par(mfrow=c(1,2))
plot(g1)
plot(g2)
}
gc
setwd("C:/Users/amyti/Documents/Amy - COLLEGE/THESIS/thesis-gc/")
source("GC_engine.R")
source("dist_engine.R")
source("GC_selection.R")
library(xlsx)
library(igraph)
library(clusteval)
################################## Read in data.
g <- length(xlsx::getSheets(loadWorkbook("data.xlsx")))
if (g %% 2 != 0) {
stop("The number of sheets must be even. For any graph pair,
each graph's sheet must be next to the other's.")
}
data <- vector("list",length(g))
for (i in 1:g) {
# First number = number of nodes in graph
data[[i]] <- as.vector(t( xlsx::read.xlsx("data.xlsx", sheetIndex = i, header = FALSE) ))[-1]
}
################################## Compute differences for all given graph pairs
# Setting parameters
gSumm <- c("cen_deg","cen_clo","cen_bet","ast",
"com_rw","com_im","com_bet","dis","eco","edh")
distf <- "l2"
gc <- vector("list",length(g/2))
for (i in seq(1,g,2)) {
# g1 and g2 must have the same number of nodes!
if (data[[i]][1] != data[[i+1]][1]) {
stop(paste("g1 and g2 must have the same # of nodes.
Error in sheets",i,"and",i+1))
}
# Create g1 and g2 as igraphs
g1 <- igraph::make_empty_graph(n = data[[i]][1], directed = FALSE)
g1 <- igraph::add_edges(g1, data[[i]][-1])
g2 <- igraph::make_empty_graph(n = data[[i+1]][1], directed = FALSE)
g2 <- igraph::add_edges(g2, data[[i+1]][-1])
# Call the engine to compute difference between g1 and g2
gc[[(i+1)/2]] <- GC_engine(g1=g1,g2=g2,gSumm=gSumm,distf=distf)
# Plot
g1$layout <- layout_in_circle
g2$layout <- layout_in_circle
par(mfrow=c(1,2))
plot(g1)
plot(g2)
}
gc
setwd("C:/Users/amyti/Documents/Amy - COLLEGE/THESIS/thesis-gc/")
source("GC_engine.R")
source("dist_engine.R")
source("GC_selection.R")
library(xlsx)
library(igraph)
library(clusteval)
################################## Read in data.
g <- length(xlsx::getSheets(loadWorkbook("data.xlsx")))
if (g %% 2 != 0) {
stop("The number of sheets must be even. For any graph pair,
each graph's sheet must be next to the other's.")
}
data <- vector("list",length(g))
for (i in 1:g) {
# First number = number of nodes in graph
data[[i]] <- as.vector(t( xlsx::read.xlsx("data.xlsx", sheetIndex = i, header = FALSE) ))[-1]
}
################################## Compute differences for all given graph pairs
# Setting parameters
gSumm <- c("cen_deg","cen_clo","cen_bet","ast",
"com_rw","com_im","com_bet","dis","eco","edh")
distf <- "l2"
gc <- vector("list",length(g/2))
for (i in seq(1,g,2)) {
# g1 and g2 must have the same number of nodes!
if (data[[i]][1] != data[[i+1]][1]) {
stop(paste("g1 and g2 must have the same # of nodes.
Error in sheets",i,"and",i+1))
}
# Create g1 and g2 as igraphs
g1 <- igraph::make_empty_graph(n = data[[i]][1], directed = FALSE)
g1 <- igraph::add_edges(g1, data[[i]][-1])
g2 <- igraph::make_empty_graph(n = data[[i+1]][1], directed = FALSE)
g2 <- igraph::add_edges(g2, data[[i+1]][-1])
# Call the engine to compute difference between g1 and g2
gc[[(i+1)/2]] <- GC_engine(g1=g1,g2=g2,gSumm=gSumm,distf=distf)
# Plot
g1$layout <- layout_in_circle
g2$layout <- layout_in_circle
par(mfrow=c(1,2))
plot(g1)
plot(g2)
}
gc
setwd("C:/Users/amyti/Documents/Amy - COLLEGE/THESIS/thesis-gc/")
source("GC_engine.R")
source("dist_engine.R")
source("GC_selection.R")
library(xlsx)
library(igraph)
library(clusteval)
################################## Read in data.
g <- length(xlsx::getSheets(loadWorkbook("data.xlsx")))
if (g %% 2 != 0) {
stop("The number of sheets must be even. For any graph pair,
each graph's sheet must be next to the other's.")
}
data <- vector("list",length(g))
for (i in 1:g) {
# First number = number of nodes in graph
data[[i]] <- as.vector(t( xlsx::read.xlsx("data.xlsx", sheetIndex = i, header = FALSE) ))[-1]
}
################################## Compute differences for all given graph pairs
# Setting parameters
gSumm <- c("cen_deg","cen_clo","cen_bet","ast",
"com_rw","com_im","com_bet","dis","eco","edh")
distf <- "l2"
gc <- vector("list",length(g/2))
for (i in seq(1,g,2)) {
# g1 and g2 must have the same number of nodes!
if (data[[i]][1] != data[[i+1]][1]) {
stop(paste("g1 and g2 must have the same # of nodes.
Error in sheets",i,"and",i+1))
}
# Create g1 and g2 as igraphs
g1 <- igraph::make_empty_graph(n = data[[i]][1], directed = FALSE)
g1 <- igraph::add_edges(g1, data[[i]][-1])
g2 <- igraph::make_empty_graph(n = data[[i+1]][1], directed = FALSE)
g2 <- igraph::add_edges(g2, data[[i+1]][-1])
# Call the engine to compute difference between g1 and g2
gc[[(i+1)/2]] <- GC_engine(g1=g1,g2=g2,gSumm=gSumm,distf=distf)
# Plot
g1$layout <- layout_in_circle
g2$layout <- layout_in_circle
par(mfrow=c(1,2))
plot(g1)
plot(g2)
}
gc
setwd("C:/Users/amyti/Documents/Amy - COLLEGE/THESIS/thesis-gc/")
source("GC_engine.R")
source("dist_engine.R")
source("GC_selection.R")
library(xlsx)
library(igraph)
library(clusteval)
################################## Read in data.
g <- length(xlsx::getSheets(loadWorkbook("data.xlsx")))
if (g %% 2 != 0) {
stop("The number of sheets must be even. For any graph pair,
each graph's sheet must be next to the other's.")
}
data <- vector("list",length(g))
for (i in 1:g) {
# First number = number of nodes in graph
data[[i]] <- as.vector(t( xlsx::read.xlsx("data.xlsx", sheetIndex = i, header = FALSE) ))[-1]
}
################################## Compute differences for all given graph pairs
# Setting parameters
gSumm <- c("cen_deg","cen_clo","cen_bet","ast",
"com_rw","com_im","com_bet","dis","eco","edh")
distf <- "l2"
gc <- vector("list",length(g/2))
for (i in seq(1,g,2)) {
# g1 and g2 must have the same number of nodes!
if (data[[i]][1] != data[[i+1]][1]) {
stop(paste("g1 and g2 must have the same # of nodes.
Error in sheets",i,"and",i+1))
}
# Create g1 and g2 as igraphs
g1 <- igraph::make_empty_graph(n = data[[i]][1], directed = FALSE)
g1 <- igraph::add_edges(g1, data[[i]][-1])
g2 <- igraph::make_empty_graph(n = data[[i+1]][1], directed = FALSE)
g2 <- igraph::add_edges(g2, data[[i+1]][-1])
# Call the engine to compute difference between g1 and g2
gc[[(i+1)/2]] <- GC_engine(g1=g1,g2=g2,gSumm=gSumm,distf=distf)
# Plot
g1$layout <- layout_in_circle
g2$layout <- layout_in_circle
par(mfrow=c(1,2))
plot(g1)
plot(g2)
}
gc
setwd("C:/Users/amyti/Documents/Amy - COLLEGE/THESIS/thesis-gc/")
source("GC_engine.R")
source("dist_engine.R")
source("GC_selection.R")
library(xlsx)
library(igraph)
library(clusteval)
################################## Read in data.
g <- length(xlsx::getSheets(loadWorkbook("data.xlsx")))
if (g %% 2 != 0) {
stop("The number of sheets must be even. For any graph pair,
each graph's sheet must be next to the other's.")
}
data <- vector("list",length(g))
for (i in 1:g) {
# First number = number of nodes in graph
data[[i]] <- as.vector(t( xlsx::read.xlsx("data.xlsx", sheetIndex = i, header = FALSE) ))[-1]
}
################################## Compute differences for all given graph pairs
# Setting parameters
gSumm <- c("cen_deg","cen_clo","cen_bet","ast",
"com_rw","com_im","com_bet","dis","eco","edh")
distf <- "l2"
gc <- vector("list",length(g/2))
for (i in seq(1,g,2)) {
# g1 and g2 must have the same number of nodes!
if (data[[i]][1] != data[[i+1]][1]) {
stop(paste("g1 and g2 must have the same # of nodes.
Error in sheets",i,"and",i+1))
}
# Create g1 and g2 as igraphs
g1 <- igraph::make_empty_graph(n = data[[i]][1], directed = FALSE)
g1 <- igraph::add_edges(g1, data[[i]][-1])
g2 <- igraph::make_empty_graph(n = data[[i+1]][1], directed = FALSE)
g2 <- igraph::add_edges(g2, data[[i+1]][-1])
# Call the engine to compute difference between g1 and g2
gc[[(i+1)/2]] <- GC_engine(g1=g1,g2=g2,gSumm=gSumm,distf=distf)
# Plot
g1$layout <- layout_in_circle
g2$layout <- layout_in_circle
par(mfrow=c(1,2))
plot(g1)
plot(g2)
}
gc
setwd("C:/Users/amyti/Documents/Amy - COLLEGE/THESIS/thesis-gc/")
source("GC_engine.R")
source("dist_engine.R")
source("GC_selection.R")
library(xlsx)
library(igraph)
library(clusteval)
################################## Read in data.
g <- length(xlsx::getSheets(loadWorkbook("data.xlsx")))
if (g %% 2 != 0) {
stop("The number of sheets must be even. For any graph pair,
each graph's sheet must be next to the other's.")
}
data <- vector("list",length(g))
for (i in 1:g) {
# First number = number of nodes in graph
data[[i]] <- as.vector(t( xlsx::read.xlsx("data.xlsx", sheetIndex = i, header = FALSE) ))[-1]
}
################################## Compute differences for all given graph pairs
# Setting parameters
gSumm <- c("cen_deg","cen_clo","cen_bet","ast",
"com_rw","com_im","com_bet","dis","eco","edh")
distf <- "l2"
gc <- vector("list",length(g/2))
for (i in seq(1,g,2)) {
# g1 and g2 must have the same number of nodes!
if (data[[i]][1] != data[[i+1]][1]) {
stop(paste("g1 and g2 must have the same # of nodes.
Error in sheets",i,"and",i+1))
}
# Create g1 and g2 as igraphs
g1 <- igraph::make_empty_graph(n = data[[i]][1], directed = FALSE)
g1 <- igraph::add_edges(g1, data[[i]][-1])
g2 <- igraph::make_empty_graph(n = data[[i+1]][1], directed = FALSE)
g2 <- igraph::add_edges(g2, data[[i+1]][-1])
# Call the engine to compute difference between g1 and g2
gc[[(i+1)/2]] <- GC_engine(g1=g1,g2=g2,gSumm=gSumm,distf=distf)
# Plot
g1$layout <- layout_in_circle
g2$layout <- layout_in_circle
par(mfrow=c(1,2))
plot(g1)
plot(g2)
}
gc
setwd("C:/Users/amyti/Documents/Amy - COLLEGE/THESIS/thesis-gc/")
source("GC_engine.R")
source("dist_engine.R")
source("GC_selection.R")
library(xlsx)
library(igraph)
library(clusteval)
################################## Read in data.
g <- length(xlsx::getSheets(loadWorkbook("data.xlsx")))
if (g %% 2 != 0) {
stop("The number of sheets must be even. For any graph pair,
each graph's sheet must be next to the other's.")
}
data <- vector("list",length(g))
for (i in 1:g) {
# First number = number of nodes in graph
data[[i]] <- as.vector(t( xlsx::read.xlsx("data.xlsx", sheetIndex = i, header = FALSE) ))[-1]
}
################################## Compute differences for all given graph pairs
# Setting parameters
gSumm <- c("cen_deg","cen_clo","cen_bet","ast",
"com_rw","com_im","com_bet","dis","eco","edh")
distf <- "l2"
gc <- vector("list",length(g/2))
for (i in seq(1,g,2)) {
# g1 and g2 must have the same number of nodes!
if (data[[i]][1] != data[[i+1]][1]) {
stop(paste("g1 and g2 must have the same # of nodes.
Error in sheets",i,"and",i+1))
}
# Create g1 and g2 as igraphs
g1 <- igraph::make_empty_graph(n = data[[i]][1], directed = FALSE)
g1 <- igraph::add_edges(g1, data[[i]][-1])
g2 <- igraph::make_empty_graph(n = data[[i+1]][1], directed = FALSE)
g2 <- igraph::add_edges(g2, data[[i+1]][-1])
# Call the engine to compute difference between g1 and g2
gc[[(i+1)/2]] <- GC_engine(g1=g1,g2=g2,gSumm=gSumm,distf=distf)
# Plot
g1$layout <- layout_in_circle
g2$layout <- layout_in_circle
par(mfrow=c(1,2))
plot(g1)
plot(g2)
}
gc
setwd("C:/Users/amyti/Documents/Amy - COLLEGE/THESIS/thesis-gc/")
source("GC_engine.R")
source("dist_engine.R")
source("GC_selection.R")
library(xlsx)
library(igraph)
library(clusteval)
################################## Read in data.
g <- length(xlsx::getSheets(loadWorkbook("data.xlsx")))
if (g %% 2 != 0) {
stop("The number of sheets must be even. For any graph pair,
each graph's sheet must be next to the other's.")
}
data <- vector("list",length(g))
for (i in 1:g) {
# First number = number of nodes in graph
data[[i]] <- as.vector(t( xlsx::read.xlsx("data.xlsx", sheetIndex = i, header = FALSE) ))[-1]
}
################################## Compute differences for all given graph pairs
# Setting parameters
gSumm <- c("cen_deg","cen_clo","cen_bet","ast",
"com_rw","com_im","com_bet","dis","eco","edh")
distf <- "l2"
gc <- vector("list",length(g/2))
for (i in seq(1,g,2)) {
# g1 and g2 must have the same number of nodes!
if (data[[i]][1] != data[[i+1]][1]) {
stop(paste("g1 and g2 must have the same # of nodes.
Error in sheets",i,"and",i+1))
}
# Create g1 and g2 as igraphs
g1 <- igraph::make_empty_graph(n = data[[i]][1], directed = FALSE)
g1 <- igraph::add_edges(g1, data[[i]][-1])
g2 <- igraph::make_empty_graph(n = data[[i+1]][1], directed = FALSE)
g2 <- igraph::add_edges(g2, data[[i+1]][-1])
# Call the engine to compute difference between g1 and g2
gc[[(i+1)/2]] <- GC_engine(g1=g1,g2=g2,gSumm=gSumm,distf=distf)
# Plot
g1$layout <- layout_in_circle
g2$layout <- layout_in_circle
par(mfrow=c(1,2))
plot(g1)
plot(g2)
}
gc
setwd("C:/Users/amyti/Documents/Amy - COLLEGE/THESIS/thesis-gc/")
source("GC_engine.R")
source("dist_engine.R")
source("GC_selection.R")
library(xlsx)
library(igraph)
library(clusteval)
################################## Read in data.
g <- length(xlsx::getSheets(loadWorkbook("data.xlsx")))
if (g %% 2 != 0) {
stop("The number of sheets must be even. For any graph pair,
each graph's sheet must be next to the other's.")
}
data <- vector("list",length(g))
for (i in 1:g) {
# First number = number of nodes in graph
data[[i]] <- as.vector(t( xlsx::read.xlsx("data.xlsx", sheetIndex = i, header = FALSE) ))[-1]
}
################################## Compute differences for all given graph pairs
# Setting parameters
gSumm <- c("cen_deg","cen_clo","cen_bet","ast",
"com_rw","com_im","com_bet","dis","eco","edh")
distf <- "l2"
gc <- vector("list",length(g/2))
for (i in seq(1,g,2)) {
# g1 and g2 must have the same number of nodes!
if (data[[i]][1] != data[[i+1]][1]) {
stop(paste("g1 and g2 must have the same # of nodes.
Error in sheets",i,"and",i+1))
}
# Create g1 and g2 as igraphs
g1 <- igraph::make_empty_graph(n = data[[i]][1], directed = FALSE)
g1 <- igraph::add_edges(g1, data[[i]][-1])
g2 <- igraph::make_empty_graph(n = data[[i+1]][1], directed = FALSE)
g2 <- igraph::add_edges(g2, data[[i+1]][-1])
# Call the engine to compute difference between g1 and g2
gc[[(i+1)/2]] <- GC_engine(g1=g1,g2=g2,gSumm=gSumm,distf=distf)
# Plot
g1$layout <- layout_in_circle
g2$layout <- layout_in_circle
par(mfrow=c(1,2))
plot(g1)
plot(g2)
}
gc
setwd("C:/Users/amyti/Documents/Amy - COLLEGE/THESIS/thesis-gc/")
source("GC_engine.R")
source("dist_engine.R")
source("GC_selection.R")
library(xlsx)
library(igraph)
library(clusteval)
################################## Read in data.
g <- length(xlsx::getSheets(loadWorkbook("data.xlsx")))
if (g %% 2 != 0) {
stop("The number of sheets must be even. For any graph pair,
each graph's sheet must be next to the other's.")
}
data <- vector("list",length(g))
for (i in 1:g) {
# First number = number of nodes in graph
data[[i]] <- as.vector(t( xlsx::read.xlsx("data.xlsx", sheetIndex = i, header = FALSE) ))[-1]
}
################################## Compute differences for all given graph pairs
# Setting parameters
gSumm <- c("cen_deg","cen_clo","cen_bet","ast",
"com_rw","com_im","com_bet","dis","eco","edh")
distf <- "l2"
gc <- vector("list",length(g/2))
for (i in seq(1,g,2)) {
# g1 and g2 must have the same number of nodes!
if (data[[i]][1] != data[[i+1]][1]) {
stop(paste("g1 and g2 must have the same # of nodes.
Error in sheets",i,"and",i+1))
}
# Create g1 and g2 as igraphs
g1 <- igraph::make_empty_graph(n = data[[i]][1], directed = FALSE)
g1 <- igraph::add_edges(g1, data[[i]][-1])
g2 <- igraph::make_empty_graph(n = data[[i+1]][1], directed = FALSE)
g2 <- igraph::add_edges(g2, data[[i+1]][-1])
# Call the engine to compute difference between g1 and g2
gc[[(i+1)/2]] <- GC_engine(g1=g1,g2=g2,gSumm=gSumm,distf=distf)
# Plot
g1$layout <- layout_in_circle
g2$layout <- layout_in_circle
par(mfrow=c(1,2))
plot(g1)
plot(g2)
}
gc
a <- c(1,1,1,2,2,2,3,3,3,4,4,4)
b <- c(1,1,1,2,2,2,4,4,4,4,4,4)
diff[i] <- dist_engine(a,b,dist="jaccard")
a
b
dist_engine(a,b,dist="jaccard")
a <- c(1,1,1,1,1,2,2,2,2,3,3,3)
length(a)
b <- c(1,1,1,1,1,3,3,3,3,3,3,3)
dist_engine(a,b,dist="jaccard")
c <- rep(0,12)
c <- rep(1,12)
dist_engine(a,c,dist="jaccard")
